/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.001;

Lz 10; // number of cells in z direction 

vertices
(
    // Lower Inlet Back
    (-49.32845 -26.30028 0)     //0
    (0 -25 0)                   //1
    (0 0 0)                     //2
    (-49.98287 -1.30885 0)      //3

    // Lower Inlet Front
    (-49.32845 -26.30028 25)   //4
    (0 -25 25)                 //5
    (0 0 25)                   //6 
    (-49.98287 -1.30885 25)    //7

    // Mixing Channel Back
    (600 -25 0)                 //8
    (600 25 0)                  //9
    (0 25 0)                    //10

    // Mixing Channel Front
    (600 -25 25)               //11
    (600 25 25)                //12
    (0 25 25)                  //13

    // Upper Inlet Back
    (-49.98287 1.30885 0)       //14
    (-49.32845 26.30028 0)      //15

    // Upper Inlet Front
    (-49.98287 1.30885 25)     //16
    (-49.32845 26.30028 25)    //17

    // Points used to split the mixing channel into a lower and upper part
    // This was needed to make the goemetry mesh when coming in a two different angles
    (600 0 0)                   //18
    (600 0 25)                 //19
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (10 10 $Lz)         //Lower Inlet
        simpleGrading
            (
                1
            (
                (0.2 0.3 10)
                (0.6 0.4 1)
                (0.2 0.3 0.1)
            )
                1
            )
    hex (14 2 10 15 16 6 13 17) (10 10 $Lz)   //Upper Inlet
        simpleGrading
            (
                1
            (
                (0.2 0.3 10)
                (0.6 0.4 1)
                (0.2 0.3 0.1)
            )
                1
            )
    hex (1 8 18 2 5 11 19 6) (30 10 $Lz)     //Lower Mixing Channel
        simpleGrading
        (
            (
                (0.5 0.75 10)
                (0.5 0.25 1)
            )
            (
                (0.2 0.3 10)
                (0.6 0.4 1)
                (0.2 0.3 0.1)
            )
            1
        )
    hex (2 18 9 10 6 19 12 13) (30 10 $Lz)   //Upper Mixing Channel
        simpleGrading
        (
            (
                (0.5 0.75 10)
                (0.5 0.25 1)
            )
            (
                (0.2 0.3 10)
                (0.6 0.4 1)
                (0.2 0.3 0.1)
            )
            1
        )
);

edges
(
);

boundary
(
    walls
    {
        type wall;
        faces
        (
            (3 7 6 2)
            (0 4 5 1)

            (1 5 11 8)
            (10 13 12 9)

            (14 16 6 2)
            (15 17 13 10)

            // Back
            (0 1 2 3)    //Lower Inlet
            (14 2 10 15) //Upper Inlet
            (1 8 18 2)   //Lower Mixing Channel
            (2 18 9 10)  //Upper Mixing Channel
        );
    }

    topInlet
    {
        type patch;
        faces
        (
            (14 16 17 15)
        );
    }

    bottomInlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (8 11 19 18)
            (18 19 12 9)
        );
    }

    reflecting
    {
        type patch; 
        faces
        (
            // Front
            (4 5 6 7)    //Lower Inlet
            (16 6 13 17) //Upper Inlet
            (5 11 19 6)  //Lower Mixing Channel
            (6 19 12 13) //Upper Mixing Channel
        );
    }

    frontBack
    {
        type empty;
        faces
        (
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //